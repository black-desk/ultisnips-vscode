#!/usr/bin/env python3

"""
The general structure of this script

1. Open the config file to figure out where ultisnips snippets are and where
   to place vscode snippets.
2. Open a .snippets file and check which language it corresponds to.
      - If it is not a language, do nothing because is must extend a language
      - If it is a known language, open all extended files and parse them.
3. Dump the combined dictionary to json
"""

import json
from pathlib import Path
from src import vim2vscode

def read_config():
    """Reads the config file and returns a dictionary containing
    the ultisnips and vscode snippets directories
    """
    config_file = Path().home() / '.vscode/ultisnips-vscode.json'
    with open(config_file, 'r') as f:
        data = json.load(f)
    return data


def replace_variables(string):
    """Replaces all of the ultisnips variables with the corresponding vscode
    variables. TODO: Needs updated
    """

    conversions = {'VISUAL': 'TM_SELECTED_TEXT'}
    for old, new in conversions.items():
        string = string.replace(old, new)
    return string


def ultisnips_to_dict(ultisnips_file):
    "Parse snippet file and return dictionary reminiscent of json format"
    snippets_dictionary = {}
    with open(ultisnips_file, 'r') as f:
        for line in f:
            if line.startswith('snippet'):
                dictionary = {}
                prefix = line.split()[1].strip()
                dictionary['prefix'] = prefix
                if '\"' in line:
                    snippet_name = line.split("\"")[1].strip()
                    dictionary['description'] = snippet_name
                body = []
                line = next(f)
                while not line.startswith('endsnippet'):
                    body.append(replace_variables(line.strip('\n')))
                    line = next(f)
                dictionary['body'] = body
                snippets_dictionary[prefix] = dictionary
    return snippets_dictionary


def detect_filetype(ultisnips_file):
    """
    Matches prefix of ultisnips filename with corresponding vscode
    language from the language dictionary.
    Returns: a dictionary containing an infile name and outfile name
    """
    key = ultisnips_file.stem
    #filename = stem + '.code-snippets'
    if key == 'all':
        return {
            'infile': ultisnips_file.name,
            'outfile': 'global.code-snippets'
        }
    elif key in vim2vscode:
        outfile = vim2vscode[key] + '.json'
        return {
            'infile': ultisnips_file.name,
            'outfile': outfile
        }


def extend(ultisnips_file):
    "Returns list of all ultisnips filenames to extend"
    base = ultisnips_file.parent
    with open(ultisnips_file) as f:
        scopes = [None]
        for line in f:
            if line.startswith('extends'):
                scopes = line.split()[1].strip().split(',')
                scopes = [base / f'{s}.snippets' for s in scopes if s]
    return scopes


def make_big_dict(ultisnips_files):
    "Create one dictionary from list of all snippets files"
    big_dict = {}
    for file in ultisnips_files:
        big_dict.update(ultisnips_to_dict(file))
    return big_dict

def main():
    directories = read_config()
    ultisnips_dir = Path(directories['ultisnips-snippets']).expanduser()
    vscode_dir = Path(directories['vscode-snippets']).expanduser()
    filenames = ultisnips_dir.glob('*.snippets')
    filenames = [detect_filetype(f) for f in filenames] # gets dict of input filenames and output filenames
    filenames = [f for f in filenames if f] # previous line returns "None" if not a real language
    for file in filenames:
        file['infile'] = ultisnips_dir / file['infile'] # full paths
        file['outfile'] = vscode_dir / file['outfile'] # full paths

    print('-'*120)
    for file in filenames:
        scopes = extend(file['infile'])
        scopes = [ultisnips_dir / s  for s in scopes if s]
        scopes = scopes + [file['infile']]
        snippets_dictionary =  make_big_dict(scopes)
        #snippets_dictionary = ultisnips_to_dict(file)
        for s in scopes:
            print(f'{str(s):<50} {"----->":<10} {str(file["outfile"]):<40}')
        with open(file['outfile'], 'w') as f:
            json.dump(snippets_dictionary, f, indent=4)
    print('-'*120)

if __name__ == "__main__":
   main()
